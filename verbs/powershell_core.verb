# Metadata for PowerShell Core
w_metadata powershell_core dlls \
    title="PowerShell Core" \
    publisher="Microsoft" \
    year="2024" \
    media="download" \
    file1="PowerShell-7.2.21-win-x86.msi" \
    file2="PowerShell-7.2.21-win-x64.msi"

load_powershell_core()
{
    # Uncomment below and remove win32 download elif and file when PowerShell Core v7.2 LTS goes EOL
    #w_package_unsupported_win32

    # Download PowerShell Core 7.2.x MSI (Latest LTS Version to support win32)
    # https://github.com/PowerShell/PowerShell/releases/v7.2.21
    if [ "${W_ARCH}" = "win64" ]; then
        w_download "https://github.com/PowerShell/PowerShell/releases/download/v7.2.21/PowerShell-7.2.21-win-x64.msi" 407640b11c89d66ec7892229e68b1d74b26f0e820b52da268c67fd166c2b46ad
        # Disable SC2154 due to shellcheck not knowing metadata is sourced before this function is run
        # shellcheck disable=SC2154
        msi="${file2}"
    elif [ "${W_ARCH}" = "win32" ]; then
        w_download "https://github.com/PowerShell/PowerShell/releases/download/v7.2.21/PowerShell-7.2.21-win-x86.msi" cdfd69f6997eabe5abdc38869eedfd90761416261bf95531300f652d0932bf0a
        # shellcheck disable=SC2154
        msi="${file1}"
    fi

    # Change directory to the cache directory where the MSI file is downloaded
    w_try_cd "${W_CACHE}/${W_PACKAGE}"

    # Install PowerShell Core using Wine's msiexec
    w_try "${WINE}" msiexec ${W_OPT_UNATTENDED:+/quiet} /i "${msi}" ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1
}